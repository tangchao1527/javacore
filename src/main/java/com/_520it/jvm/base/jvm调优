一、jvm优化
    1、一般来说，当survivor区不够大或者占用量达到50%，就会把一些对象放到老年区。通过设置合理的eden区，survivor区及使用率，可以将年轻对象保存在年轻代，从而避免full GC，使用-Xmn设置年轻代的大小

    2、对于占用内存比较多的大对象，一般会选择在老年代分配内存。如果在年轻代给大对象分配内存，年轻代内存不够了，就要在eden区移动大量对象到老年代，然后这些移动的对象可能很快消亡，因此导致full GC。通过设置参数：-XX:PetenureSizeThreshold=1000000，单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。

    3、一般情况下，年轻对象放在eden区，当第一次GC后，如果对象还存活，放到survivor区，此后，每GC一次，年龄增加1，当对象的年龄达到阈值，就被放到tenured老年区。这个阈值可以同构-XX:MaxTenuringThreshold设置。如果想让对象留在年轻代，可以设置比较大的阈值。

    4、设置最小堆和最大堆：-Xmx和-Xms稳定的堆大小堆垃圾回收是有利的，获得一个稳定的堆大小的方法是设置-Xms和-Xmx的值一样，即最大堆和最小堆一样，如果这样子设置，系统在运行时堆大小理论上是恒定的，稳定的堆空间可以减少GC次数，因此，很多服务端都会将这两个参数设置为一样的数值。稳定的堆大小虽然减少GC次数，但是增加每次GC的时间，因为每次GC要把堆的大小维持在一个区间内。

    5、一个不稳定的堆并非毫无用处。在系统不需要使用大内存的时候，压缩堆空间，使得GC每次应对一个较小的堆空间，加快单次GC次数。基于这种考虑，JVM提供两个参数，用于压缩和扩展堆空间。
    （1）-XX:MinHeapFreeRatio 参数用于设置堆空间的最小空闲比率。默认值是40，当堆空间的空闲内存比率小于40，JVM便会扩展堆空间
    （2）-XX:MaxHeapFreeRatio 参数用于设置堆空间的最大空闲比率。默认值是70， 当堆空间的空闲内存比率大于70，JVM便会压缩堆空间。
    （3）当-Xmx和-Xmx相等时，上面两个参数无效

    6、通过增大吞吐量提高系统性能，可以通过设置并行垃圾回收收集器。
    （1）-XX:+UseParallelGC:年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能的减少垃圾回收时间。
    （2）-XX:+UseParallelOldGC:设置老年代使用并行垃圾回收收集器。

    7、尝试使用大的内存分页：使用大的内存分页增加CPU的内存寻址能力，从而系统的性能。-XX:+LargePageSizeInBytes 设置内存页的大小

    8、使用非占用的垃圾收集器。-XX:+UseConcMarkSweepGC老年代使用CMS收集器降低停顿。

    9、-XXSurvivorRatio=3，表示年轻代中的分配比率：survivor:eden = 2:3

    10、JVM性能调优的工具：
    （1）jps（Java Process Status）：输出JVM中运行的进程状态信息(现在一般使用jconsole)
    （2）jstack：查看java进程内线程的堆栈信息。
    （3）jmap：用于生成堆转存快照
    （4）jhat：用于分析jmap生成的堆转存快照（一般不推荐使用，而是使用Ecplise Memory Analyzer）
    （3）jstat是JVM统计监测工具。可以用来显示垃圾回收信息、类加载信息、新生代统计信息等。
    （4）VisualVM：故障处理工具
二、jvm常用参数

    参数名称	                    含义	                     默认值	                            说明
    -Xms	                   初始堆大小	               物理内存的1/64(<1GB)	   默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.
    -Xmx	                   最大堆大小	                物理内存的1/4(<1GB)	   默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制
    -Xmn	            年轻代大小(1.4or lator)	 	                           注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 老年代大小 + 持久代（永久代）大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8
    -XX:NewSize	       设置年轻代大小(for 1.3/1.4)
    -XX:MaxNewSize	    年轻代最大值(for 1.3/1.4)
    -XX:PermSize	设置持久代(perm gen)初始值	物理内存的1/64
    -Xss	每个线程的堆栈大小	JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行
            调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,
            经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，
            需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:
            -Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了
    -XX:NewRatio	年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)	 	-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。
    -XX:SurvivorRatio	Eden区与Survivor区的大小比值	 	设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10
    -XX:+DisableExplicitGC	关闭System.gc()	 	这个参数需要严格的测试
    -XX:PretenureSizeThreshold	对象超过多大是直接在旧生代分配	0	单位字节 新生代采用Parallel ScavengeGC时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.
    -XX:ParallelGCThreads	并行收集器的线程数	 	此值最好配置与处理器数目相等 同样适用于CMS
    -XX:MaxGCPauseMillis	每次年轻代垃圾回收的最长时间(最大暂停时间)

三、jvm调优的一些方面
   根据刚刚涉及的jvm的知识点，我们可以尝试对JVM进行调优，主要就是堆内存那块
   所有线程共享数据区大小=新生代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m。所以java堆中增大年轻代后，将会减小年老代大小（因为老年代的清理是使用fullgc，所以老年代过小的话反而是会增多fullgc的）。此值对系统性能影响较大，Sun官方推荐配置为java堆的3/8。

   4.1 调整最大堆内存和最小堆内存
   -Xmx –Xms：指定java堆最大值（默认值是物理内存的1/4(<1GB)）和初始java堆最小值（默认值是物理内存的1/64(<1GB))
   默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制。简单点来说，你不停地往堆内存里面丢数据，等它剩余大小小于40%了，
   JVM就会动态申请内存空间不过会小于-Xmx，如果剩余大小大于70%，又会动态缩小不过不会小于–Xms。就这么简单
   开发过程中，通常会将 -Xms 与 -Xmx两个参数的配置相同的值，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。
   我们执行下面的代码：
   System.out.println("Xmx=" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + "M");    //系统的最大空间
   System.out.println("free mem=" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + "M");  //系统的空闲空间
   System.out.println("total mem=" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + "M");  //当前可用的总空间
   注意：此处设置的是Java堆大小，也就是新生代大小 + 老年代大小

   4.2 调整新生代和老年代的比值
   -XX:NewRatio --- 新生代（eden+2*Survivor）和老年代（不包含永久区）的比值

   例如：-XX:NewRatio=4，表示新生代:老年代=1:4，即新生代占整个堆的1/5。在Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。

   4.3 调整Survivor区和Eden区的比值
   -XX:SurvivorRatio（幸存代）--- 设置两个Survivor区和eden的比值

   例如：8，表示两个Survivor:eden=2:8，即一个Survivor占年轻代的1/10

   4.4 设置年轻代和老年代的大小
   -XX:NewSize --- 设置年轻代大小

   -XX:MaxNewSize --- 设置年轻代最大值

   可以通过设置不同参数来测试不同的情况，反正最优解当然就是官方的Eden和Survivor的占比为8:1:1，然后在刚刚介绍这些参数的时候都已经附带了一些说明，感兴趣的也可以看看。反正最大堆内存和最小堆内存如果数值不同会导致多次的gc，需要注意。

   4.5 小总结
   根据实际事情调整新生代和幸存代的大小，官方推荐新生代占java堆的3/8，幸存代占新生代的1/10

   在OOM时，记得Dump出堆，确保可以排查现场问题，通过下面命令你可以输出一个.dump文件，这个文件可以使用VisualVM或者Java自带的Java VisualVM工具。

   -Xmx20m -Xms5m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=你要输出的日志路径
   一般我们也可以通过编写脚本的方式来让OOM出现时给我们报个信，可以通过发送邮件或者重启程序等来解决。

   4.6 永久区的设置
   -XX:PermSize -XX:MaxPermSize
   初始空间（默认为物理内存的1/64）和最大空间（默认为物理内存的1/4）。也就是说，jvm启动时，永久区一开始就占用了PermSize大小的空间，如果空间还不够，可以继续扩展，但是不能超过MaxPermSize，否则会OOM。

   tips：如果堆空间没有用完也抛出了OOM，有可能是永久区导致的。堆空间实际占用非常少，但是永久区溢出 一样抛出OOM。

   4.7 JVM的栈参数调优
   4.7.1 调整每个线程栈空间的大小
   可以通过-Xss：调整每个线程栈空间的大小

   JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右

   4.7.2 设置线程栈的大小
   -XXThreadStackSize：
       设置线程栈的大小(0 means use default stack size)
   这些参数都是可以通过自己编写程序去简单测试的，这里碍于篇幅问题就不再提供demo了

   4.8 (可以直接跳过了)JVM其他参数介绍
   形形色色的参数很多，就不会说把所有都扯个遍了，因为大家其实也不会说一定要去深究到底。

   4.8.1 设置内存页的大小
   -XXThreadStackSize：
       设置内存页的大小，不可设置过大，会影响Perm的大小
   4.8.2 设置原始类型的快速优化
   -XX:+UseFastAccessorMethods：
       设置原始类型的快速优化
   4.8.3 设置关闭手动GC
   -XX:+DisableExplicitGC：
       设置关闭System.gc()(这个参数需要严格的测试)
   4.8.4 设置垃圾最大年龄
   -XX:MaxTenuringThreshold
       设置垃圾最大年龄。如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代.
       对于年老代比较多的应用,可以提高效率。如果将此值设置为一个较大值,
       则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活时间,
       增加在年轻代即被回收的概率。该参数只有在串行GC时才有效.
   4.8.5 加快编译速度
   -XX:+AggressiveOpts
   加快编译速度
   4.8.6 改善锁机制性能
   -XX:+UseBiasedLocking
   4.8.7 禁用垃圾回收
   -Xnoclassgc
   4.8.8 设置堆空间存活时间
   -XX:SoftRefLRUPolicyMSPerMB
       设置每兆堆空闲空间中SoftReference的存活时间，默认值是1s。
   4.8.9 设置对象直接分配在老年代
   -XX:PretenureSizeThreshold
       设置对象超过多大时直接在老年代分配，默认值是0。
   4.8.10 设置TLAB占eden区的比例
   -XX:TLABWasteTargetPercent
       设置TLAB占eden区的百分比，默认值是1% 。
   4.8.11设置是否优先YGC
   -XX:+CollectGen0First
       设置FullGC时是否先YGC，默认值是false。
